/***********************************************************************//**	@file***************************************************************************/#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__)#define FDK_PLATFORM "mac"#define FDK_PLATFORM_MAC#define FDK_PLATFORM_APPLE#define FDK_PLATFORM_POSIX#define FDK_WITH_GL#else#error "not support platform"#endif/***********************************************************************//**	@brief ***************************************************************************/#include <memory>#include <vector>/***********************************************************************//**	@brief マクロ***************************************************************************/#define FK_SETTER(name, var) \  auto set##name(const decltype(var)& value) -> decltype(*this)& { \    var = value; \    return *this; \  }#define FK_GETTER(name, var)                    \  const decltype(var)& get##name() const {      \    return var;                                 \  }#define FK_REFER(name, var)                     \  FK_GETTER(name, var);                         \  decltype(var)& get##name() {                  \    return var;                                 \  }#define FK_ACCESSOR(name, var)                  \  FK_SETTER(name, var);                         \  FK_REFER(name, var);#define FK_BIT_SETTER(name, var, index)                                 \  auto set##name(bool value) -> decltype(*this)& {                      \                                                  var.set(index, value); \                                                  return *this;         \  }#define FK_BIT_GETTER(name, var, index)         \  bool is##name() const {                       \    return var.test(index);                     \  }#define FK_BIT_ACCESSOR(name, var, index)       \  FK_BIT_SETTER(name, var, index);              \  FK_BIT_GETTER(name, var, index)#define FK_CAN_SETTER(name, var, index)                                 \  auto setCan##name(bool value) -> decltype(*this)& {                   \                                                     var.set(index, value); \                                                     return *this;      \  }#define FK_CAN_GETTER(name, var, index)         \  bool can##name() const {                      \    return var.test(index);                     \  }#define FK_CAN_ACCESSOR(name, var, index)       \  FK_CAN_SETTER(name, var, index);              \  FK_CAN_GETTER(name, var, index)#define FK_DECLARE_CLASS(klass)                                 \  class klass;                                                  \  using klass##Ptr = std::shared_ptr<klass>;                    \  using Const##klass##Ptr = std::shared_ptr<const klass>;/***********************************************************************//**	@brief ***************************************************************************/namespace fk {namespace framework {FK_DECLARE_CLASS(Component);FK_DECLARE_CLASS(Context);FK_DECLARE_CLASS(Object);FK_DECLARE_CLASS(Updatable);}using namespace framework;}/***********************************************************************//**	$Id$***************************************************************************/